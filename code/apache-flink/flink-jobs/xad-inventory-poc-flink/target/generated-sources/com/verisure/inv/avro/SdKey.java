/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.verisure.inv.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SdKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3804010850740250033L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SdKey\",\"namespace\":\"com.verisure.inv.avro\",\"fields\":[{\"name\":\"idCountry\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"idInstallation\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"timestampEvent\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"timestampEventDevice\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SdKey> ENCODER =
      new BinaryMessageEncoder<SdKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SdKey> DECODER =
      new BinaryMessageDecoder<SdKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SdKey> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SdKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SdKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SdKey>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SdKey to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SdKey from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SdKey instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SdKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence idCountry;
   private java.lang.Integer idInstallation;
   private java.lang.Long timestampEvent;
   private java.lang.Long timestampEventDevice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SdKey() {}

  /**
   * All-args constructor.
   * @param idCountry The new value for idCountry
   * @param idInstallation The new value for idInstallation
   * @param timestampEvent The new value for timestampEvent
   * @param timestampEventDevice The new value for timestampEventDevice
   */
  public SdKey(java.lang.CharSequence idCountry, java.lang.Integer idInstallation, java.lang.Long timestampEvent, java.lang.Long timestampEventDevice) {
    this.idCountry = idCountry;
    this.idInstallation = idInstallation;
    this.timestampEvent = timestampEvent;
    this.timestampEventDevice = timestampEventDevice;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return idCountry;
    case 1: return idInstallation;
    case 2: return timestampEvent;
    case 3: return timestampEventDevice;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: idCountry = (java.lang.CharSequence)value$; break;
    case 1: idInstallation = (java.lang.Integer)value$; break;
    case 2: timestampEvent = (java.lang.Long)value$; break;
    case 3: timestampEventDevice = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'idCountry' field.
   * @return The value of the 'idCountry' field.
   */
  public java.lang.CharSequence getIdCountry() {
    return idCountry;
  }


  /**
   * Sets the value of the 'idCountry' field.
   * @param value the value to set.
   */
  public void setIdCountry(java.lang.CharSequence value) {
    this.idCountry = value;
  }

  /**
   * Gets the value of the 'idInstallation' field.
   * @return The value of the 'idInstallation' field.
   */
  public java.lang.Integer getIdInstallation() {
    return idInstallation;
  }


  /**
   * Sets the value of the 'idInstallation' field.
   * @param value the value to set.
   */
  public void setIdInstallation(java.lang.Integer value) {
    this.idInstallation = value;
  }

  /**
   * Gets the value of the 'timestampEvent' field.
   * @return The value of the 'timestampEvent' field.
   */
  public java.lang.Long getTimestampEvent() {
    return timestampEvent;
  }


  /**
   * Sets the value of the 'timestampEvent' field.
   * @param value the value to set.
   */
  public void setTimestampEvent(java.lang.Long value) {
    this.timestampEvent = value;
  }

  /**
   * Gets the value of the 'timestampEventDevice' field.
   * @return The value of the 'timestampEventDevice' field.
   */
  public java.lang.Long getTimestampEventDevice() {
    return timestampEventDevice;
  }


  /**
   * Sets the value of the 'timestampEventDevice' field.
   * @param value the value to set.
   */
  public void setTimestampEventDevice(java.lang.Long value) {
    this.timestampEventDevice = value;
  }

  /**
   * Creates a new SdKey RecordBuilder.
   * @return A new SdKey RecordBuilder
   */
  public static com.verisure.inv.avro.SdKey.Builder newBuilder() {
    return new com.verisure.inv.avro.SdKey.Builder();
  }

  /**
   * Creates a new SdKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SdKey RecordBuilder
   */
  public static com.verisure.inv.avro.SdKey.Builder newBuilder(com.verisure.inv.avro.SdKey.Builder other) {
    if (other == null) {
      return new com.verisure.inv.avro.SdKey.Builder();
    } else {
      return new com.verisure.inv.avro.SdKey.Builder(other);
    }
  }

  /**
   * Creates a new SdKey RecordBuilder by copying an existing SdKey instance.
   * @param other The existing instance to copy.
   * @return A new SdKey RecordBuilder
   */
  public static com.verisure.inv.avro.SdKey.Builder newBuilder(com.verisure.inv.avro.SdKey other) {
    if (other == null) {
      return new com.verisure.inv.avro.SdKey.Builder();
    } else {
      return new com.verisure.inv.avro.SdKey.Builder(other);
    }
  }

  /**
   * RecordBuilder for SdKey instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SdKey>
    implements org.apache.avro.data.RecordBuilder<SdKey> {

    private java.lang.CharSequence idCountry;
    private java.lang.Integer idInstallation;
    private java.lang.Long timestampEvent;
    private java.lang.Long timestampEventDevice;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.verisure.inv.avro.SdKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.idCountry)) {
        this.idCountry = data().deepCopy(fields()[0].schema(), other.idCountry);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.idInstallation)) {
        this.idInstallation = data().deepCopy(fields()[1].schema(), other.idInstallation);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestampEvent)) {
        this.timestampEvent = data().deepCopy(fields()[2].schema(), other.timestampEvent);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestampEventDevice)) {
        this.timestampEventDevice = data().deepCopy(fields()[3].schema(), other.timestampEventDevice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing SdKey instance
     * @param other The existing instance to copy.
     */
    private Builder(com.verisure.inv.avro.SdKey other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.idCountry)) {
        this.idCountry = data().deepCopy(fields()[0].schema(), other.idCountry);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.idInstallation)) {
        this.idInstallation = data().deepCopy(fields()[1].schema(), other.idInstallation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestampEvent)) {
        this.timestampEvent = data().deepCopy(fields()[2].schema(), other.timestampEvent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestampEventDevice)) {
        this.timestampEventDevice = data().deepCopy(fields()[3].schema(), other.timestampEventDevice);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'idCountry' field.
      * @return The value.
      */
    public java.lang.CharSequence getIdCountry() {
      return idCountry;
    }


    /**
      * Sets the value of the 'idCountry' field.
      * @param value The value of 'idCountry'.
      * @return This builder.
      */
    public com.verisure.inv.avro.SdKey.Builder setIdCountry(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.idCountry = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'idCountry' field has been set.
      * @return True if the 'idCountry' field has been set, false otherwise.
      */
    public boolean hasIdCountry() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'idCountry' field.
      * @return This builder.
      */
    public com.verisure.inv.avro.SdKey.Builder clearIdCountry() {
      idCountry = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'idInstallation' field.
      * @return The value.
      */
    public java.lang.Integer getIdInstallation() {
      return idInstallation;
    }


    /**
      * Sets the value of the 'idInstallation' field.
      * @param value The value of 'idInstallation'.
      * @return This builder.
      */
    public com.verisure.inv.avro.SdKey.Builder setIdInstallation(java.lang.Integer value) {
      validate(fields()[1], value);
      this.idInstallation = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'idInstallation' field has been set.
      * @return True if the 'idInstallation' field has been set, false otherwise.
      */
    public boolean hasIdInstallation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'idInstallation' field.
      * @return This builder.
      */
    public com.verisure.inv.avro.SdKey.Builder clearIdInstallation() {
      idInstallation = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestampEvent' field.
      * @return The value.
      */
    public java.lang.Long getTimestampEvent() {
      return timestampEvent;
    }


    /**
      * Sets the value of the 'timestampEvent' field.
      * @param value The value of 'timestampEvent'.
      * @return This builder.
      */
    public com.verisure.inv.avro.SdKey.Builder setTimestampEvent(java.lang.Long value) {
      validate(fields()[2], value);
      this.timestampEvent = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestampEvent' field has been set.
      * @return True if the 'timestampEvent' field has been set, false otherwise.
      */
    public boolean hasTimestampEvent() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestampEvent' field.
      * @return This builder.
      */
    public com.verisure.inv.avro.SdKey.Builder clearTimestampEvent() {
      timestampEvent = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestampEventDevice' field.
      * @return The value.
      */
    public java.lang.Long getTimestampEventDevice() {
      return timestampEventDevice;
    }


    /**
      * Sets the value of the 'timestampEventDevice' field.
      * @param value The value of 'timestampEventDevice'.
      * @return This builder.
      */
    public com.verisure.inv.avro.SdKey.Builder setTimestampEventDevice(java.lang.Long value) {
      validate(fields()[3], value);
      this.timestampEventDevice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestampEventDevice' field has been set.
      * @return True if the 'timestampEventDevice' field has been set, false otherwise.
      */
    public boolean hasTimestampEventDevice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestampEventDevice' field.
      * @return This builder.
      */
    public com.verisure.inv.avro.SdKey.Builder clearTimestampEventDevice() {
      timestampEventDevice = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SdKey build() {
      try {
        SdKey record = new SdKey();
        record.idCountry = fieldSetFlags()[0] ? this.idCountry : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.idInstallation = fieldSetFlags()[1] ? this.idInstallation : (java.lang.Integer) defaultValue(fields()[1]);
        record.timestampEvent = fieldSetFlags()[2] ? this.timestampEvent : (java.lang.Long) defaultValue(fields()[2]);
        record.timestampEventDevice = fieldSetFlags()[3] ? this.timestampEventDevice : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SdKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<SdKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SdKey>
    READER$ = (org.apache.avro.io.DatumReader<SdKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.idCountry == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.idCountry);
    }

    if (this.idInstallation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.idInstallation);
    }

    if (this.timestampEvent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.timestampEvent);
    }

    if (this.timestampEventDevice == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.timestampEventDevice);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.idCountry = null;
      } else {
        this.idCountry = in.readString(this.idCountry instanceof Utf8 ? (Utf8)this.idCountry : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.idInstallation = null;
      } else {
        this.idInstallation = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timestampEvent = null;
      } else {
        this.timestampEvent = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timestampEventDevice = null;
      } else {
        this.timestampEventDevice = in.readLong();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.idCountry = null;
          } else {
            this.idCountry = in.readString(this.idCountry instanceof Utf8 ? (Utf8)this.idCountry : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.idInstallation = null;
          } else {
            this.idInstallation = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timestampEvent = null;
          } else {
            this.timestampEvent = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timestampEventDevice = null;
          } else {
            this.timestampEventDevice = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










